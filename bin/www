#!/usr/bin/env node

/**
 * Module dependencies.
 */

const config = require('../config/config.json');
var fs = require('fs');
var app = require('../app');
var debug = require('debug')('dockerexpress:server');
var http = require('http');
var https = require('https');
var auth = require('../lib/authz_manager');

/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || '3000');
app.set('port', port);
var httpsPort = normalizePort(process.env.HTTPSPORT || '8000');
app.set('httpsPort', httpsPort);

// set up force SSL options
app.set('forceSSLOptions', { 
    httpsPort: httpsPort 
});

var ssl_options = {
    key:  fs.readFileSync('./.localhost-ssl/key.pem'),
    cert: fs.readFileSync('./.localhost-ssl/cert.pem')
};

const Issuer = require('openid-client').Issuer;

var oidc_opts = {
    providerUrl:    config.oidc.providerUrl,
    clientId:       config.oidc.clientId, 
    clientSecret:   config.oidc.clientSecret,
    callbackUri:    'https://localhost:8000/cb'
};

app.locals.oidc = oidc_opts;

var server, secureServer;

Issuer.discover('https://' + oidc_opts.providerUrl)
    .then(function (iss) {
        app.locals.authzManager = new auth.AuthorizationManager(iss, oidc_opts, config.aws, app.locals.globalLog);

        /**
         * Create HTTP server.
         */
        server = http.createServer(app);
        server.listen(port);
        server.on('error', onError);
        server.on('listening', onListening);

        /*
        * As above but for HTTPS server
        */
        secureServer = https.createServer(ssl_options, app);
        secureServer.listen(httpsPort);
        secureServer.on('error', onError);
        secureServer.on('listening', onListening);

    });

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
    var port = parseInt(val, 10);

    if (isNaN(port)) {
        // named pipe
        return val;
    }

    if (port >= 0) {
        // port number
        return port;
    }

    return false;
}

/**
 * Event listener for HTTP server 'error' event.
 */

function onError(error) {
    if (error.syscall !== 'listen') {
        throw error;
    }

    var bind = typeof port === 'string'
      ? 'Pipe ' + port
      : 'Port ' + port;

    // handle specific listen errors with friendly messages
    switch (error.code) {
    case 'EACCES':
        app.locals.globalLog.error(bind + ' requires elevated privileges');
        process.exit(1);
        break;
    case 'EADDRINUSE':
        app.locals.globalLog.error(bind + ' is already in use');
        process.exit(1);
        break;
    default:
        throw error;
    }
}

/**
 * Event listener for HTTP server 'listening' event.
 */

function onListening() {
    var addr = server.address();
    var bind = typeof addr === 'string'
      ? 'pipe ' + addr
      : 'port ' + addr.port;
    debug('Listening on ' + bind);
}
